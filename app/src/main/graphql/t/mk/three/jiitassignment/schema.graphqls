# This file was generated. Do not edit manually.schema {    query: Query    mutation: Mutation}directive @cacheControl(maxAge: Int, scope: CacheControlScope) on OBJECT | FIELD_DEFINITIONdirective @hasRole(roles: [String]) on FIELD | FIELD_DEFINITIONinterface NotificationInterface {    createdAt: DateTime    id: String!    message: String!    read: Boolean    title: String!}interface PageInterface {    coverImage: String    deepLinkUrl: String    id: String!    subTitle: String    text: String    title: String!    url: String}interface ScopeItem {    day: Int    id: ID    month: Int    quarter: Int    value: Float    year: Int}interface SignRaw {    name: String}union SignDisplay = DisplayIPO | DisplayTabletype AvailableInfo {    businessintelligence: Boolean    estimates: Boolean    financials: Boolean    officers: Boolean    significantdevelopment: Boolean}type Badge {    badge: Int}type BroadcastNotification implements NotificationInterface {    createdAt: DateTime    id: String!    message: String!    read: Boolean    title: String!}type BussinessSummary {    content: String}type Character {    stability: String    stability_trend: Int}type Checklist {    data: [ChecklistData]    summary: ChecklistSummary}type ChecklistData {    isChecked: Boolean    name: String}type ChecklistSummary {    total: Int    totalChecked: Int}type ChoiceNextQuestion {    id: Int!    nextQuestionId: Int!}type Company {    address: CompanyAddress    fax: String    first_price_date: DateTime    foreignBuy: CompanyForeignBuy    incorporated_date: DateTime    ipo_date: DateTime    link: [CompanyLink]    officer: [Officer]    phone: String}type CompanyAddress {    city: String    contry_code: String    country: String    line1: String    line2: String    state: String    zipcode: String}type CompanyForeignBuy {    availableRoom: Int    buyVolume: Int    ownedPercentage: Float    totalRoom: Int    tradableValue: Float    tradableVolume: Float}type CompanyLink {    _id: String    title: String    url: String}type CompanyStatus {    activestatus: Boolean    expectedipo: Boolean    publicstatus: Boolean}type Comparison {    business_type: ComparisonValue    industry: ComparisonValue    market: ComparisonValue    sector: ComparisonValue}type ComparisonValue {    avg_jitta_score: Float    avg_price_diff: Float    member: Int    rank: Int}type Consensus {    fiscal: ConsensusPeriodic    quarter: ConsensusPeriodic}type ConsensusPeriodic {    nprofitrep: [ConsensusValue]    revenue: [ConsensusValue]}type ConsensusValue {    calendarQuarter: Int    calendarYear: Int    fiscalQuarter: Int    fiscalYear: Int    high: Float    id: String    low: Float    mean: Float    numofest: Int}type DefaultScopeItem implements ScopeItem {    day: Int    id: ID    month: Int    quarter: Int    value: Float    year: Int}type DemographicChoice {    choiceTitle: String    id: Int    image: String}type DemographicQuestion {    choice: [DemographicChoice]    id: Int    questionTitle: String}type DemographicQuestionList {    questionList: [DemographicQuestion]}type DisplayIPO {    title: String    value: Int}type DisplayTable {    columnHead: [String]    columns: [TableColumn]    footer: String    title: String}type Factor {    financial: FactorItem    growth: FactorItem    management: FactorItem    recent: FactorItem    return: FactorItem}type FactorItem {    level: FactorLevel    name: String    value: Float}type FactorScope {    first: FactorScopeItem    last: FactorScopeItem    total: Int    type: String    values(filterBy: IntelFilter): [FactorScopeItem]}type FactorScopeItem {    day: Int    id: ID    month: Int    quarter: Int    value: Factor    year: Int}type Factsheet {    fiscal(limit: Int): [FactsheetFiscalValue]    name: String    quarter(limit: Int): [FactsheetQuarterValue]}type FactsheetFiscalValue {    value: String    year: String}type FactsheetPrice {    data(filterBy: FilterInput): [Interday]    updatedAt: DateTime}type FactsheetQuarterValue {    quarter: String    value: String}type Financial {    dividendHistory: [FinancialDividendHistory]    fiscal(filterBy: FilterInput): [FinancialFascal]    quarter(filterBy: FilterInput): [FinancialQuarter]    ratio: FinancialRatio}type FinancialDividendHistory {    adj_amount: Float    amount: Float    currency: String    ex_date: DateTime    pay_date: DateTime}type FinancialFascal {    balance: FinancialSheet    cashflow: FinancialSheet    complete_financial_date: DateTime    currency: String    end_date: String    id: String    income: FinancialSheet    source: String    year: Int}type FinancialQuarter {    balance: FinancialSheet    cashflow: FinancialSheet    currency: String    end_date: String    id: String    income: FinancialSheet    quarter: Int    source: String    year: Int}type FinancialRatio {    latest: FinancialSheet}type FinancialSheet {    lineitem: [FinancialValue]    period_length: Int    period_type: String    source: FinancialSheetSource    statement_date: String}type FinancialSheetSource {    from: String    updated: DateTime}type FinancialSummary {    context: String    updated: DateTime}type FinancialUpdateNotification implements NotificationInterface {    createdAt: DateTime    currentScore: String    financialUpdated: String    id: String!    message: String!    previousScore: String    read: Boolean    stock: Stock    title: String!}type FinancialValue {    id: String    name: String    value: Float}type FollowingData {    list: [FollowingStockData]    total: Int}type FollowingStockData {    stock: Stock    value: FollowingStockValue}type FollowingStockValue {    created: DateTime    status: String}type Fundamental {    beta: Float    dividend: Float    dividend_per_share: Float    eps: Float    market_cap: Float    pe: Float    shares: Float    yield: Float}type GraphPrice {    first_graph_period: String    graphs: [GraphPriceValue]}type GraphPriceValue {    linePrice: Float    stockPrice: Float}type HighLowPrice {    date: Date    price: Float}type IntelJittaSignLast {    display: SignDisplay    name: String    raw: [SignRaw]    title: String    type: String    value: String}type Interday {    close: Float    datetime: DateTime    high: Float    latest_price_timestamp: DateTime    low: Float    market_cap: Float    open: Float    timestamp: DateTime    volume: Float}type InterdayGroup {    averageVolume: Float    close: Float    high: Float    low: Float    open: Float    timestamp: DateTime}type InterdayResult {    count: Float    interdays: [Interday]    interdaysMonthly: [InterdayGroup]    interdaysYearly: [InterdayGroup]}type InvestingMixChoice {    id: Int!    stockAlias: String    title: String!    titleEmoji: String}type InvestingMixPage implements PageInterface {    coverImage: String    deepLinkUrl: String    id: String!    stocks: [Stock]    subTitle: String    text: String    title: String!    url: String}type InvestingMixPathItem {    choiceNextQuestionId: [ChoiceNextQuestion]    id: Int!    previousQuestionId: Int}type InvestingMixQuestion {    choice: [InvestingMixChoice]!    description: String    id: Int!    isFirstQuestion: Boolean    isLastQuestion: Boolean    question: String!    total: Int    type: String}type JittaIntel {    factor: FactorScope    jittaRankScore: Scope    lastCompleteStatementKey: String    line: Scope    lossChanceKey: Scope    monthlyPrice: Scope    priceDiff: Scope    score: Scope    sign: SignScope    yearlyReturn: Scope}type JittaLineValue {    month: String    value: Float}type ListNotifications {    count: Int    notifications: [NotificationInterface]}type LoginResponse {    data: LoginResponseData}type LoginResponseData {    token: String    userId: String}type LossChance {    last: Float    updatedAt: DateTime}type MockupStock {    alias: String    name: String    price: Price    stockId: Int    symbol: String}type Mutation {    clearBadge: Badge    follow(alias: String, id: String, stockId: Int): Stock    loginWithApple(input: LoginWithAppleInput): LoginResponse    loginWithEmail(input: LoginWithEmailInput!): LoginResponse    loginWithFacebook(input: LoginWithFacebookInput!): LoginResponse    loginWithGoogle(input: LoginWithGoogleInput!): LoginResponse    logout: Boolean    pushNoti(input: PushNotiInput): PushNotiResult    pushNotiFromUserId(input: PushNotiFromUserIdInput): PushNotiResult    submitAnswer(input: [SubmitAnswerInput]!): InvestingMixPage    submitDemographic(input: [SubmitDemographicInput]): InvestingMixQuestion    syncDevice(input: SyncDeviceInput): SyncDeviceResult    syncSetting(input: SettingInput!): User    unFollow(alias: String, id: String, stockId: Int): Stock}type NotificationSetting {    financialUpdate: Boolean}type Officer {    age: String    emailAddress: String    firstName: String    lastName: String    prefix: String    suffix: String    title: String    yearBorn: Int}type PageGroup {    id: String    pages: [PageInterface]    subTitle: String    title: String}type PlayListValue {    name: String    value: String}type Playlist {    list: [PlayListValue]    updatedAt: DateTime}type Price {    latest: Interday    yesterday: Interday}type PriceCorrelation {    corr: Float    stock_id: String}type PriceDiffItem implements ScopeItem {    day: Int    id: ID    month: Int    percent: String    quarter: Int    type: String    value: Float    year: Int}type PushNotiResult {    success: Boolean}type QuarterValueData {    id: String    value: Float}type QuarterValues {    average_prices: [QuarterValueData]    average_values: [QuarterValueData]    average_volumes: [QuarterValueData]    high_low_price: QuarterValuesHighLowPrice    price: QuarterValuesPrice    quarter: String    volume: [QuarterValueData]}type QuarterValuesHighLowPrice {    high: HighLowPrice    low: HighLowPrice}type QuarterValuesPrice {    close: QuarterValuesPriceClose}type QuarterValuesPriceClose {    average: [QuarterValueData]    change: [QuarterValueData]    high: [QuarterValueData]    last: Float    low: [QuarterValueData]}type Query {    availableCountry: [StockCountry]    following(filter: FollowingInput): FollowingData    getDemographicQuestions: DemographicQuestionList    getInvestingMixData: InvestingMixPage    getNextInvestingMixQuestion(input: NextInvestingMixQuestionInput): InvestingMixQuestion    interdays(endDate: String, filterBy: FilterInput, groupBy: GroupByEnum, startDate: String, stockId: Int): InterdayResult    isAuthenticated: Boolean    jittaRanking(filter: RankingInput): RankingResult    listJittaSectorType: [Sector]    listNotifications(limit: Int, page: Int): ListNotifications    listPageGroup: [PageGroup]    me: User    page(id: String): PageInterface    search(countries: [Country], keyword: String): [SearchResult]    stock(id: String, stockId: Int): Stock    test: String    translateSummary(input: TranslateInput): TranslateResult    wise(id: String, stockId: Int): [WiseData]}type RankingResult {    count: Int    data: [StockAlgoliaExplore]}type Recommendation {    business_type: [String]    industry: [String]    other_sector: [String]    related: [String]    sector: [String]}type Scope {    first: ScopeItem    last: ScopeItem    total: Int    type: String    values(filterBy: IntelFilter): [ScopeItem]}type SearchResult {    exchange: String    id: String    jitta_score: Float    localName: [String]    market: String    name: String    symbol: String}type Sector {    id: String!    name: String}type Setting {    defaultMarket: String    language: String    notifications: NotificationSetting    theme: String}type SignRawIPO implements SignRaw {    name: String    value: Int}type SignRawValues implements SignRaw {    name: String    values: [ScopeItem]}type SignScope {    last: [IntelJittaSignLast]}type Stock {    actual_exchange: String    adr: Boolean    alias: String    alias_history: [String]    availableInfo: AvailableInfo    bussiness_summary: BussinessSummary    bussiness_type: String    capitalIqId: String    character: Character    checklist: Checklist    class_conversion_factor: Int    company: Company    companyStatus: CompanyStatus    comparison: Comparison    consensus: Consensus    createDate: DateTime    currency: String    currency_sign: String    exchange: String    factsheet(names: [String]): [Factsheet]    factsheetPrice: FactsheetPrice    financial: Financial    financial_summary: FinancialSummary    funFact: String    fundamental: Fundamental    graph_price: GraphPrice    id: String    index_membership: [String]    industry: String    industryGroup: String    industry_group: String    isFollowing: Boolean    jitta: JittaIntel    jittaRankScore: Float    last_complete_statement_enddate: String    last_complete_statement_key: String    localName: String    loss_chance: LossChance    market: String    name: String    nativeName: String    playlist: Playlist    price: Price    price_correlation: PriceCorrelation    price_currency: String    primary_stock: Boolean    quarterValues(filterBy: FilterInput): [QuarterValues]    recommendation: Recommendation    reportingTemplate: String    ric: String    sector: Sector    shortname: String    split_logs: [Any]    status: String    stockId: Int!    summary: String    symbol: String    title: String    trade_statistics: QuarterValues    type: String    updateDate: DateTime    updatedAt: DateTime    updatedFinancial: DateTime    updatedFinancialComplete: DateTime    wise: [WiseData]}type StockAlgoliaExplore {    currency: String    exchange: String    firstGraphqlPeriod: String    graphs: [GraphPriceValue]    id: String    industry: String    jittaRankScore: Float    jittaScore: Float    latestLossChance: Float    latestPrice: Float    latestPriceDiff: PriceDiffItem    market: String    name: String    nativeName: String    rank: Int    sector: Sector    status: String    stockId: Int!    symbol: String    title: String    updatedAt: DateTime}type StockCountry {    code: String    displayExchange: [String]    flag: String    name: String}type StockThemePage implements PageInterface {    coverImage: String    deepLinkUrl: String    id: String!    stocks: [Stock]    subTitle: String    text: String    title: String!    url: String}type SyncDeviceResult {    playerId: ID}type TableColumn {    data: [String]    name: String}type TranslateResult {    text: String}type User {    _id: String    acl: Any    badge: Int    email: String    emails: [UserEmail]    isNewUser: Boolean    name: String    phoneNumber: String    picture: String    setting: Setting    userId: String}type UserEmail {    email: String    verify: Boolean}type WiseChart {    data: [WiseChartData]    key: String    name: String}type WiseChartData {    value: String    year: String}type WiseContent {    chart: [WiseChart]    table: WiseTable    text: String}type WiseData {    data: [WiseContent]    key: String    title: String}type WiseTable {    columnHead: [String]    columns: [TableColumn]    footer: String    title: String}enum CacheControlScope {    PRIVATE    PUBLIC}enum FactorLevel {    HIGH    LOW    MEDIUM}enum GroupByEnum {    Month    Year}enum NotificationType {    BROADCAST    FINANCIAL_UPDATE}enum PageType {    STOCK_THEME}enum SortEnum {    ASC    DESC}scalar Any"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."scalar Date"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."scalar DateTime"A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."scalar Timeinput Country {    name: String    weight: Float}input FilterInput {    limit: Int    sort: SortEnum}input FollowingInput {    limit: Int    page: Int}input IntelFilter {    limit: Int    sort: SortEnum}input LoginWithAppleInput {    idToken: String    setting: SettingInput}input LoginWithEmailInput {    email: String!    password: String!}input LoginWithFacebookInput {    accessToken: String!}input LoginWithGoogleInput {    accessToken: String!    idToken: String!}input NextInvestingMixQuestionInput {    choiceId: Int    id: Int!    previousQuestionId: Int}input NotificationInput {    financialUpdate: Boolean}input PushNotiFromUserIdInput {    userIds: [String]!}input PushNotiInput {    playerIds: [String]!    template: String}input RankingInput {    limit: Int    market: String!    page: Int    sectors: [String]}input SettingInput {    defaultMarket: String    language: String    notifications: NotificationInput    theme: String}input SubmitAnswerInput {    questionId: Int!    selectedChoiceId: Int!    stockAlias: String}input SubmitDemographicInput {    choiceId: Int    questionId: Int}input SyncDeviceInput {    deviceType: Int!    language: String    notiType: Int!    userId: ID    uuid: ID!}input TranslateInput {    text: String}