package t.mk.three.jiitassignment.feature.main.repositoryimport com.apollographql.apollo3.api.Optionalimport t.mk.three.jiitassignment.SectorsQueryimport t.mk.three.jiitassignment.StockByRankingQueryimport t.mk.three.jiitassignment.data.RankingApolloClientimport t.mk.three.jiitassignment.type.RankingInputclass MainRepository(private val apolloClient: RankingApolloClient): BaseMainRepository {    override suspend fun getRankingStock(        isLoadSector: Boolean,        market: String,        page: Int,        limit: Int,        sectors: List<String>    ): RankingApolloClient.Result<StockByRankingQuery.Data> {        val query = StockByRankingQuery(            loadSector = isLoadSector,            filter = Optional.present(                RankingInput(                    limit = Optional.present(limit),                    market = market,                    page = Optional.present(page),                    sectors = Optional.presentIfNotNull(sectors.filter { it.isNotBlank() }.takeIf { it.isNotEmpty() })                )            )        )        return apolloClient.query(query)    }}