package t.mk.three.jiitassignment.feature.detail.adapterimport android.view.LayoutInflaterimport android.view.ViewGroupimport androidx.annotation.ColorResimport androidx.annotation.StringResimport androidx.recyclerview.widget.DiffUtilimport androidx.recyclerview.widget.ListAdapterimport androidx.recyclerview.widget.RecyclerViewimport t.mk.three.jiitassignment.Rimport t.mk.three.jiitassignment.StockDetailQueryimport t.mk.three.jiitassignment.databinding.ViewCompanyDescriptionBindingimport t.mk.three.jiitassignment.databinding.ViewCompanyInfoBindingimport t.mk.three.jiitassignment.databinding.ViewErrorBindingimport t.mk.three.jiitassignment.databinding.ViewFactorScoreBindingimport t.mk.three.jiitassignment.databinding.ViewLoadingBindingimport t.mk.three.jiitassignment.databinding.ViewSignIpoContainerBindingimport t.mk.three.jiitassignment.databinding.ViewSignTableContainerBindingimport t.mk.three.jiitassignment.databinding.ViewStockDetailHeaderBindingimport t.mk.three.jiitassignment.databinding.ViewTitleBindingimport t.mk.three.jiitassignment.feature.detail.view.CompanyInfoViewHolderimport t.mk.three.jiitassignment.feature.detail.view.DescriptionViewHolderimport t.mk.three.jiitassignment.feature.detail.view.FactorViewHolderimport t.mk.three.jiitassignment.feature.detail.view.SignIPOViewHolderimport t.mk.three.jiitassignment.feature.detail.view.SignTableViewHolderimport t.mk.three.jiitassignment.feature.detail.view.StockDetailHeaderViewHolderimport t.mk.three.jiitassignment.feature.detail.view.TitleViewHolderimport t.mk.three.jiitassignment.feature.main.view.ErrorViewHolderimport t.mk.three.jiitassignment.view.LoadingViewHolderclass StockDetailAdapter(    private val onSignClicked: (String) -> Unit,    private val getRecyclerView: (id: String) -> RecyclerView) :    ListAdapter<StockDetailAdapter.Item, RecyclerView.ViewHolder>(DiffCallback()) {    private class DiffCallback : DiffUtil.ItemCallback<Item>() {        override fun areItemsTheSame(            oldItem: Item,            newItem: Item        ): Boolean {            return when {                newItem is Item.Loading && oldItem is Item.Loading -> true                newItem is Item.Header && oldItem is Item.Header -> true                newItem is Item.Error && oldItem is Item.Error -> true                newItem is Item.Title && oldItem is Item.Title -> true                newItem is Item.Factor && oldItem is Item.Factor -> true                newItem is Item.SignTable && oldItem is Item.SignTable -> true                newItem is Item.SignIPO && oldItem is Item.SignIPO -> true                newItem is Item.Description && oldItem is Item.Description -> true                newItem is Item.CompanyInfo && oldItem is Item.CompanyInfo -> true                else -> false            }        }        override fun areContentsTheSame(            oldItem: Item,            newItem: Item        ): Boolean {            return oldItem == newItem        }    }    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {        return when (ItemType.entries[viewType]) {            ItemType.LOADING -> LoadingViewHolder(                ViewLoadingBinding.inflate(                    LayoutInflater.from(                        parent.context                    ), parent, false                )            )            ItemType.HEADER -> StockDetailHeaderViewHolder(                ViewStockDetailHeaderBinding.inflate(                    LayoutInflater.from(parent.context),                    parent,                    false                )            )            ItemType.ERROR -> ErrorViewHolder(                ViewErrorBinding.inflate(                    LayoutInflater.from(parent.context),                    parent,                    false                )            )            ItemType.FACTOR -> FactorViewHolder(                ViewFactorScoreBinding.inflate(                    LayoutInflater.from(parent.context),                    parent,                    false                )            )            ItemType.TITLE -> TitleViewHolder(                ViewTitleBinding.inflate(                    LayoutInflater.from(parent.context),                    parent,                    false                )            )            ItemType.SIGN_TABLE -> SignTableViewHolder(                ViewSignTableContainerBinding.inflate(                    LayoutInflater.from(parent.context),                    parent,                    false                )            )            ItemType.COMPANY_INFO -> CompanyInfoViewHolder(                ViewCompanyInfoBinding.inflate(                    LayoutInflater.from(parent.context),                    parent,                    false                )            )            ItemType.DESCRIPTION -> DescriptionViewHolder(                ViewCompanyDescriptionBinding.inflate(                    LayoutInflater.from(parent.context),                    parent,                    false                )            )            ItemType.SIGN_IPO -> SignIPOViewHolder(                ViewSignIpoContainerBinding.inflate(                    LayoutInflater.from(parent.context),                    parent,                    false                )            )        }    }    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {        when (val data = getItem(position)) {            is Item.Header -> (holder as? StockDetailHeaderViewHolder)?.init(                stock = data            )            Item.Loading -> {                //Do nothing            }            is Item.Error -> (holder as? ErrorViewHolder)?.init(data.error)            is Item.Factor -> (holder as? FactorViewHolder)?.init(                max = data.max,                progress = data.progress,                title = data.title,                color = data.color            )            is Item.Title -> (holder as? TitleViewHolder)?.init(data.stringRes)            is Item.SignTable -> {                (holder as? SignTableViewHolder)?.init(                    id = data.id,                    title = data.title,                    detail = data.detail,                    isExpand = data.isExpand,                    recyclerView = getRecyclerView(data.id),                    color = data.color,                    onSignClicked = onSignClicked                )            }            is Item.CompanyInfo -> (holder as? CompanyInfoViewHolder)?.init(                sector = data.sector,                industry = data.industry,                website = data.website            )            is Item.Description -> (holder as? DescriptionViewHolder)?.init(                description = data.description            )            is Item.SignIPO -> (holder as? SignIPOViewHolder)?.init(                title = data.title,                value = data.value            )        }    }    override fun getItemViewType(position: Int): Int {        return when (getItem(position)) {            is Item.Header -> ItemType.HEADER.ordinal            Item.Loading -> ItemType.LOADING.ordinal            is Item.Error -> ItemType.ERROR.ordinal            is Item.Factor -> ItemType.FACTOR.ordinal            is Item.Title -> ItemType.TITLE.ordinal            is Item.SignTable -> ItemType.SIGN_TABLE.ordinal            is Item.CompanyInfo -> ItemType.COMPANY_INFO.ordinal            is Item.Description -> ItemType.DESCRIPTION.ordinal            is Item.SignIPO -> ItemType.SIGN_IPO.ordinal        }    }    sealed class Item {        data object Loading : Item()        data class Error(            val error: String        ) : Item()        data class Title(            @StringRes val stringRes: Int        ) : Item()        data class Header(            val currency: String,            val rank: Int,            val member: Int,            val name: String?,            val symbol: String?,            val market: String?,            val score: Double?,            val jittaLine: List<StockDetailQuery.Value3?>,            val priceLine: List<StockDetailQuery.Value1?>,            val range: List<StockDetailHeaderViewHolder.MonthYear>,            val priceDiffPercent: List<StockDetailQuery.Value?>,            val monthScore: List<StockDetailQuery.Value2?>        ) : Item()        data class Factor(            val max: Int,            val progress: Int,            val title: String,            @ColorRes val color: Int = R.color.primaryColor        ) : Item()        data class SignTable(            val id: String,            val title: String,            val detail: String,            val isExpand: Boolean,            @ColorRes val color: Int = R.color.primaryColor        ) : Item()        data class SignIPO(            val value: Int,            val title: String        ) : Item()        data class Description(            val description: String        ) : Item()        data class CompanyInfo(            val sector: String?,            val industry: String?,            val website: String?        ) : Item()    }    enum class ItemType {        TITLE,        COMPANY_INFO,        DESCRIPTION,        SIGN_TABLE,        SIGN_IPO,        FACTOR,        ERROR,        LOADING,        HEADER    }}