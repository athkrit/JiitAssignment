package t.mk.three.jiitassignment.feature.detail.adapterimport android.view.LayoutInflaterimport android.view.ViewGroupimport androidx.recyclerview.widget.DiffUtilimport androidx.recyclerview.widget.ListAdapterimport androidx.recyclerview.widget.RecyclerViewimport t.mk.three.jiitassignment.databinding.ViewTableDetailBindingimport t.mk.three.jiitassignment.databinding.ViewTableHeaderBindingimport t.mk.three.jiitassignment.feature.detail.view.TableDetailViewHolderimport t.mk.three.jiitassignment.feature.detail.view.TableHeaderViewHolderclass SignTableAdapter :    ListAdapter<SignTableAdapter.Item, RecyclerView.ViewHolder>(DiffCallback()) {    private class DiffCallback : DiffUtil.ItemCallback<Item>() {        override fun areItemsTheSame(            oldItem: Item,            newItem: Item        ): Boolean {            return when {                newItem is Item.Header && oldItem is Item.Header -> true                newItem is Item.Detail && oldItem is Item.Detail -> true                else -> false            }        }        override fun areContentsTheSame(            oldItem: Item,            newItem: Item        ): Boolean {            return oldItem == newItem        }    }    enum class ItemType {        HEADER,        DETAIL    }    sealed class Item {        data class Header(            val headers: List<String?>        ) : Item()        data class Detail(            val header: String,            val values: List<String?>        ) : Item()    }    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {        return when (ItemType.entries[viewType]) {            ItemType.HEADER -> TableHeaderViewHolder(                ViewTableHeaderBinding.inflate(                    LayoutInflater.from(parent.context),                    parent,                    false                )            )            ItemType.DETAIL -> TableDetailViewHolder(                ViewTableDetailBinding.inflate(                    LayoutInflater.from(parent.context),                    parent,                    false                )            )        }    }    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {        when (val data = getItem(position)) {            is Item.Detail -> {                (holder as? TableDetailViewHolder)?.init(data.header, data.values)            }            is Item.Header -> {                (holder as? TableHeaderViewHolder)?.init(data.headers)            }        }    }    override fun getItemViewType(position: Int): Int {        return when (getItem(position)) {            is Item.Detail -> ItemType.DETAIL.ordinal            is Item.Header -> ItemType.HEADER.ordinal        }    }}