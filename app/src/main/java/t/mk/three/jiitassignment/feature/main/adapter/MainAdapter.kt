package t.mk.three.jiitassignment.feature.main.adapterimport android.view.LayoutInflaterimport android.view.ViewGroupimport androidx.recyclerview.widget.DiffUtilimport androidx.recyclerview.widget.ListAdapterimport androidx.recyclerview.widget.RecyclerViewimport t.mk.three.jiitassignment.databinding.ViewErrorBindingimport t.mk.three.jiitassignment.databinding.ViewLoadingBindingimport t.mk.three.jiitassignment.databinding.ViewStockBindingimport t.mk.three.jiitassignment.feature.main.view.ErrorViewHolderimport t.mk.three.jiitassignment.view.LoadingViewHolderimport t.mk.three.jiitassignment.feature.main.view.StockViewHolderimport t.mk.three.jiitassignment.feature.main.viewModel.MainViewModelclass MainAdapter(    private val onStockClicked: (id: String, name: String?) -> Unit) : ListAdapter<MainAdapter.Item, RecyclerView.ViewHolder>(DiffCallback()) {    private class DiffCallback : DiffUtil.ItemCallback<Item>() {        override fun areItemsTheSame(            oldItem: Item,            newItem: Item        ): Boolean {            return when {                newItem is Item.LOADING && oldItem is Item.LOADING -> true                newItem is Item.FAIL && oldItem is Item.FAIL -> true                newItem is Item.StockInfo && oldItem is Item.StockInfo -> oldItem.stock.id == newItem.stock.id                else -> false            }        }        override fun areContentsTheSame(            oldItem: Item,            newItem: Item        ): Boolean {            return when {                newItem is Item.LOADING && oldItem is Item.LOADING -> true                newItem is Item.FAIL && oldItem is Item.FAIL -> true                newItem is Item.StockInfo && oldItem is Item.StockInfo -> oldItem.stock == newItem.stock                else -> false            }        }    }    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {        return when (ItemType.entries[viewType]) {            ItemType.STOCK -> StockViewHolder(                ViewStockBinding.inflate(                    LayoutInflater.from(parent.context),                    parent,                    false                )            )            ItemType.LOADING -> LoadingViewHolder(                ViewLoadingBinding.inflate(                    LayoutInflater.from(parent.context),                    parent,                    false                )            )            ItemType.FAIL -> ErrorViewHolder(                ViewErrorBinding.inflate(                    LayoutInflater.from(parent.context),                    parent,                    false                )            )        }    }    override fun getItemViewType(position: Int): Int {        return when (getItem(position)) {            is Item.FAIL -> ItemType.FAIL.ordinal            Item.LOADING -> ItemType.LOADING.ordinal            is Item.StockInfo -> ItemType.STOCK.ordinal        }    }    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {        when (val data = getItem(position)) {            is Item.FAIL -> (holder as? ErrorViewHolder)?.init(data.message)            Item.LOADING -> {                //Do nothing            }            is Item.StockInfo -> (holder as? StockViewHolder)?.init(stock = data.stock, onStockClicked = onStockClicked)        }    }    enum class ItemType {        STOCK,        LOADING,        FAIL    }    sealed class Item {        data class FAIL(            val message: String        ) : Item()        data object LOADING : Item()        data class StockInfo(            val stock: MainViewModel.Stock        ) : Item()    }}