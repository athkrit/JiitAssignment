package t.mk.three.jiitassignment.feature.detail.viewimport android.content.Contextimport androidx.core.content.ContextCompatimport androidx.recyclerview.widget.RecyclerViewimport com.github.mikephil.charting.components.AxisBaseimport com.github.mikephil.charting.data.Entryimport com.github.mikephil.charting.data.LineDataimport com.github.mikephil.charting.data.LineDataSetimport com.github.mikephil.charting.formatter.ValueFormatterimport com.github.mikephil.charting.highlight.Highlightimport com.github.mikephil.charting.listener.OnChartValueSelectedListenerimport t.mk.three.jiitassignment.Rimport t.mk.three.jiitassignment.StockDetailQueryimport t.mk.three.jiitassignment.databinding.ViewStockDetailHeaderBindingimport t.mk.three.jiitassignment.extension.thousandsimport t.mk.three.jiitassignment.feature.detail.adapter.StockDetailAdapterimport java.time.OffsetDateTimeimport java.time.ZoneIdimport java.time.format.DateTimeFormatterclass StockDetailHeaderViewHolder(    private val binding: ViewStockDetailHeaderBinding) : RecyclerView.ViewHolder(binding.root) {    fun init(stock: StockDetailAdapter.Item.Header) {        val context = binding.root.context        binding.tvName.text = stock.name        binding.tvSymbol.text = context.resources.getString(            R.string.stock_symbol,            stock.market,            stock.symbol        )        binding.tvScore.text = stock.score?.thousands(2) ?: "N/A"        binding.tvRanking.text = context.resources.getString(            R.string.jitta_ranking_title,            stock.rank.toString(),            stock.member.toString()        )        setupChart(            currency = stock.currency,            priceDiffPercent = stock.priceDiffPercent,            monthScore = stock.monthScore,            range = stock.range,            jittaLine = stock.jittaLine,            priceLine = stock.priceLine        )    }    private fun setupChart(        currency: String,        priceDiffPercent: List<StockDetailQuery.Value?>,        monthScore: List<StockDetailQuery.Value2?>,        range: List<MonthYear>,        jittaLine: List<StockDetailQuery.Value3?>,        priceLine: List<StockDetailQuery.Value1?>    ) {        val context = binding.root.context        val jittaLineEntry = jittaLine.mapNotNull { value3 ->            val yValue = value3?.value ?: -1.0            val xValue = range.indexOfFirst { it.month == value3?.month && it.year == value3.year }            if (yValue > -1 && xValue > -1) {                Entry(                    xValue.toFloat(),                    yValue.toFloat()                )            } else {                null            }        }        val priceLineEntry = priceLine.mapNotNull { value3 ->            val yValue = value3?.value ?: -1.0            val xValue = range.indexOfFirst { it.month == value3?.month && it.year == value3.year }            if (yValue > -1 && xValue > -1) {                Entry(                    xValue.toFloat(),                    yValue.toFloat()                )            } else {                null            }        }        val jittaScoreLine = LineDataSet(            jittaLineEntry,            context.resources.getString(R.string.jitta_line_title)        ).apply {            setDrawHorizontalHighlightIndicator(false)            setDrawCircleHole(false)            setDrawCircles(false)            valueTextColor = ContextCompat.getColor(context, android.R.color.transparent)            lineWidth = 2f            color = ContextCompat.getColor(context, R.color.fontSecondary)            highLightColor = ContextCompat.getColor(context, R.color.fontPrimary)            enableDashedLine(                context.resources.getDimensionPixelSize(R.dimen.line_length).toFloat(),                context.resources.getDimensionPixelSize(R.dimen.line_length).toFloat(),                0f            )        }        val priceChart = LineDataSet(            priceLineEntry,            context.resources.getString(R.string.price_title)        ).apply {            setDrawHorizontalHighlightIndicator(false)            setDrawCircleHole(false)            setDrawCircles(false)            disableDashedLine()            valueTextColor = ContextCompat.getColor(context, android.R.color.transparent)            lineWidth = 2f            color = ContextCompat.getColor(context, R.color.primaryColor)            highLightColor = ContextCompat.getColor(context, R.color.fontPrimary)        }        val lineData = LineData(jittaScoreLine, priceChart)        val lineChart = binding.vChart        lineChart.data = lineData        lineChart.xAxis.labelCount = range.distinctBy { it.year }.size        lineChart.xAxis.granularity = 12f        lineChart.xAxis.setAxisMaximum(range.lastIndex.toFloat())        lineChart.xAxis.setAxisMinimum(0f)        lineChart.xAxis.setDrawGridLines(false)        lineChart.axisLeft.setDrawGridLines(false)        lineChart.xAxis.valueFormatter = object : ValueFormatter() {            override fun getAxisLabel(value: Float, axis: AxisBase?): String {                return range[value.toInt()].year.toString()            }        }        lineChart.setOnChartValueSelectedListener(object : OnChartValueSelectedListener {            override fun onValueSelected(e: Entry?, h: Highlight?) {                setChartInfo(                    currency = currency,                    index = e?.x?.toInt() ?: -1,                    context = context,                    priceDiffPercent = priceDiffPercent,                    monthScore = monthScore,                    range = range,                    priceLine = priceLine                )            }            override fun onNothingSelected() {                setChartInfo(                    currency = currency,                    index = priceLineEntry.lastOrNull()?.x?.toInt() ?: -1,                    context = context,                    priceDiffPercent = priceDiffPercent,                    monthScore = monthScore,                    range = range,                    priceLine = priceLine                )            }        })        setChartInfo(            currency = currency,            index = priceLineEntry.lastOrNull()?.x?.toInt() ?: -1,            context = context,            priceDiffPercent = priceDiffPercent,            monthScore = monthScore,            range = range,            priceLine = priceLine        )    }    private fun setChartInfo(        currency: String,        index: Int,        context: Context,        priceDiffPercent: List<StockDetailQuery.Value?>,        monthScore: List<StockDetailQuery.Value2?>,        range: List<MonthYear>,        priceLine: List<StockDetailQuery.Value1?>    ) {        range.getOrNull(index)?.let { monthYear ->            updateDate(monthYear)            updateYearScore(                context = context,                value = monthScore.firstOrNull { it?.year == monthYear.year && it.quarter == monthYear.quarter }?.value            )            updatePercent(                context = context,                percent = priceDiffPercent.firstOrNull { it?.year == monthYear.year && it.month == monthYear.month }?.value            )            updatePrice(                context = context,                currency = currency,                price = priceLine.firstOrNull { it?.year == monthYear.year && it.month == monthYear.month }?.value            )        } ?: run {            binding.tvDate.text = ""            updatePrice(                context = context,                price = null,                currency = currency            )            updateYearScore(                context = context,                value = null            )            updatePercent(                context = context,                percent = null            )        }    }    private fun updateDate(monthYear: MonthYear) {        val pattern = DateTimeFormatter.ofPattern("MMM yyyy").withZone(ZoneId.of("UTC"))        val date = OffsetDateTime.now(ZoneId.of("UTC"))            .withMonth(monthYear.month)            .withYear(monthYear.year)        binding.tvDate.text = pattern.format(date)    }    private fun updateYearScore(context: Context, value: Double?) {        binding.tvDateScore.text = context.resources.getString(            R.string.chart_score_text,            value?.thousands(2) ?: "N/A"        )    }    private fun updatePercent(context: Context, percent: Double?) {        percent?.let {            if (percent >= 0) {                binding.tvDatePercent.setTextColor(ContextCompat.getColor(context, R.color.green))                binding.tvDatePercent.text = context.resources.getString(                    R.string.chart_score_over_title,                    (percent * 100.0).thousands(2),                    context.resources.getString(R.string.percent_title)                )            } else {                binding.tvDatePercent.setTextColor(ContextCompat.getColor(context, R.color.orange))                binding.tvDatePercent.text = context.resources.getString(                    R.string.chart_score_under_title,                    (percent * 100.0).thousands(2),                    context.resources.getString(R.string.percent_title)                )            }        } ?: run {            binding.tvDatePercent.setTextColor(ContextCompat.getColor(context, R.color.fontPrimary))            binding.tvDatePercent.text = "N/A"        }    }    private fun updatePrice(context: Context, price: Double?, currency: String) {        binding.tvDatePrice.text = context.resources.getString(            R.string.chart_price_text,            price?.thousands(2) ?: "N/A",            "($currency)".takeIf { currency.isNotBlank() } ?: ""        )    }    data class MonthYear(        val month: Int,        val year: Int    ) {        val quarter = ((month - 1) / 3) + 1    }}