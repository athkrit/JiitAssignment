package t.mk.three.jiitassignment.feature.detail.viewimport androidx.core.content.ContextCompatimport androidx.recyclerview.widget.RecyclerViewimport com.github.mikephil.charting.animation.Easingimport com.github.mikephil.charting.components.AxisBaseimport com.github.mikephil.charting.components.XAxisimport com.github.mikephil.charting.data.Entryimport com.github.mikephil.charting.data.LineDataimport com.github.mikephil.charting.data.LineDataSetimport com.github.mikephil.charting.formatter.ValueFormatterimport t.mk.three.jiitassignment.Rimport t.mk.three.jiitassignment.databinding.ViewStockDetailHeaderBindingimport t.mk.three.jiitassignment.extension.thousandsimport t.mk.three.jiitassignment.feature.detail.adapter.StockDetailAdapterclass StockDetailHeaderViewHolder(    private val binding: ViewStockDetailHeaderBinding): RecyclerView.ViewHolder(binding.root) {    fun init(stock: StockDetailAdapter.Item.Header) {        val context = binding.root.context        binding.tvName.text = stock.name        binding.tvSymbol.text = context.resources.getString(R.string.stock_symbol, stock.market, stock.symbol)        binding.tvScore.text = stock.score?.thousands(2) ?: "N/A"        binding.tvRanking.text = context.resources.getString(R.string.jitta_ranking_title, stock.rank.toString(), stock.member.toString())        setupChart(            range = stock.range,            jittaLineEntry = stock.jittaLine,            priceLineEntry = stock.priceLine        )    }    private fun setupChart(        range: List<MonthYear>,        jittaLineEntry: List<Entry>,        priceLineEntry: List<Entry>    ) {        val context = binding.root.context        val jittaScoreLine = LineDataSet(            jittaLineEntry,            "Jitta Line"        ).apply {            xMax            setDrawCircleHole(false)            setDrawCircles(false)            valueTextColor = ContextCompat.getColor(context, android.R.color.transparent)            lineWidth = 2f            color = ContextCompat.getColor(context, R.color.fontSecondary)            enableDashedLine(                context.resources.getDimensionPixelSize(R.dimen.line_length).toFloat(),                context.resources.getDimensionPixelSize(R.dimen.line_length).toFloat(),                0f            )        }        val priceChart = LineDataSet(            priceLineEntry,            "Price"        ).apply {            setDrawCircleHole(false)            setDrawCircles(false)            disableDashedLine()            valueTextColor = ContextCompat.getColor(context, android.R.color.transparent)            lineWidth = 2f            color = ContextCompat.getColor(context, R.color.primaryColor)        }        val lineData = LineData(jittaScoreLine, priceChart)        val lineChart = binding.vChart        lineChart.data = lineData        lineChart.axisRight.isEnabled = false        lineChart.description.text = ""        lineChart.animateX(1000, Easing.EaseInExpo)        lineChart.xAxis.position = XAxis.XAxisPosition.BOTTOM        lineChart.setTouchEnabled(true)        lineChart.isDragEnabled = true        lineChart.setScaleEnabled(false)        lineChart.setPinchZoom(false)        lineChart.isDoubleTapToZoomEnabled = false        lineChart.xAxis.labelCount = range.distinctBy { it.year }.size        lineChart.xAxis.granularity = 12f        lineChart.xAxis.setAxisMaximum(range.lastIndex.toFloat())        lineChart.xAxis.valueFormatter = object : ValueFormatter() {            override fun getAxisLabel(value: Float, axis: AxisBase?): String {                return range[value.toInt()].year.toString()            }        }        lineChart.xAxis.labelRotationAngle = 270f    }    data class MonthYear(        val month: Int?,        val year: Int?    )}